package UI;

import GTPMessageBuildingBlocks.*;
import Utilities.*;

import java.io.IOException;
import java.math.BigInteger;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.List;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author vsabziyev
 */
public class PDPMaintenance extends javax.swing.JFrame {

    
    private static DatagramSocket socket;
    private static ListeningThread thread;
    private boolean listening = false;
    /**
     * Creates new form PDPMaintenance
     * @param givenSocket
     * @param givenThread
     */
    public PDPMaintenance(DatagramSocket givenSocket, ListeningThread givenThread) {
        initComponents();
        socket = givenSocket;
        thread = givenThread;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jTextField5 = new javax.swing.JTextField();
        jTextField6 = new javax.swing.JTextField();
        jTextField7 = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jTextField8 = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel9 = new javax.swing.JLabel();
        jCheckBox1 = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel15 = new javax.swing.JLabel();

        jTextField1.setText("128");

        jTextField2.setText("False");

        jLabel1.setText("Cause");

        jLabel2.setText("Reordering Required");

        jTextField5.setText("1");

        jTextField6.setText("192.168.1.1");
        jTextField6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField6ActionPerformed(evt);
            }
        });

        jTextField7.setText("10.34.111.9");

        jLabel5.setText("Charging ID");

        jLabel6.setText("End User Address");

        jLabel7.setText("GGSN address for CP");

        jTextField8.setText("10.34.111.9");

        jLabel8.setText("GGSN address for UP");

        jButton1.setText("Start/Stop Listening");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel9.setText("Stopped");

        jCheckBox1.setSelected(true);
        jCheckBox1.setText("Respond to echo");

        jLabel3.setText("IMSI");

        jLabel4.setText("Sequence No.");

        jLabel10.setText("TEID Data I");

        jLabel11.setText("TEID CP");

        jLabel12.setText("jLabel12");

        jLabel13.setText("jLabel13");

        jLabel14.setText("jLabel14");

        jLabel15.setText("jLabel15");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jCheckBox1)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addComponent(jTextField6)
                                .addComponent(jTextField7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 88, Short.MAX_VALUE)
                                .addComponent(jTextField8, javax.swing.GroupLayout.Alignment.TRAILING)
                                .addComponent(jTextField5))
                            .addComponent(jLabel9)
                            .addComponent(jButton1))
                        .addGap(199, 199, 199))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(2, 2, 2)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTextField2)
                            .addComponent(jTextField1))
                        .addGap(177, 177, 177)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(jLabel4)
                    .addComponent(jLabel10)
                    .addComponent(jLabel11))
                .addGap(33, 33, 33)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel12)
                    .addComponent(jLabel13)
                    .addComponent(jLabel14)
                    .addComponent(jLabel15))
                .addContainerGap(217, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(40, 40, 40)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel3)
                    .addComponent(jLabel12))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel13))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5)
                    .addComponent(jLabel10)
                    .addComponent(jLabel14))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6)
                            .addComponent(jLabel11))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField7, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel7))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jTextField8, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8))
                        .addGap(9, 9, 9)
                        .addComponent(jCheckBox1)
                        .addGap(109, 109, 109)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel9))
                    .addComponent(jLabel15))
                .addContainerGap(56, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        if (!listening) {
            listening = true;
            thread.setPDPui(this);
            jLabel9.setText("Listening ...");
        }
        else {
            listening = false;
            jLabel9.setText("Stopped");
        }
        
        thread.setPDPListening(listening);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jTextField6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField6ActionPerformed

    public void acceptPDPRequest(byte[] pdpRequest, InetAddress address) throws IOException {

        List<InformationElement> IEList = new ArrayList<InformationElement>();

        // TODO parseing
        
        // accept always present fields in following order
            // flags
            // message type
            // length
            // TEID
            // Sequence number
            // NPDU Number
            // Next Extension Header
        
        
        // flags
        String flags = "";
        for (int i = 2; i < String.format("%8s", Integer.toBinaryString(pdpRequest[0] & 0xFF)).replace(' ', '0').length(); i++) {
            flags += String.format("%8s", Integer.toBinaryString(pdpRequest[0] & 0xFF)).replace(' ', '0').charAt(i) + ";";
        }
        IEFlags flag = new IEFlags(flags);
        IEList.add(flag);
        
        // message type
        IEMessageType msgtype = new IEMessageType(new Integer(pdpRequest[1] & 0xFF).toString());
        IEList.add(msgtype);
        
        // length
        IELength length = new IELength(new Integer((pdpRequest[2] + pdpRequest[3]) & 0xFF).toString());
        IEList.add(length);
        
        // TEID
        //int teid1 = pdpRequest[4] & 0xFF;
        //int teid2 = pdpRequest[5] & 0xFF;
        //int teid3 = pdpRequest[6] & 0xFF;
        //int teid4 = pdpRequest[7] & 0xFF;
        byte[] teid1 = new byte[4];
        
        teid1[0] = pdpRequest[4];
        teid1[1] = pdpRequest[5];
        teid1[2] = pdpRequest[6];
        teid1[3] = pdpRequest[7];
        
        //GTPMessageBuildingBlocks.IETEID teid = new GTPMessageBuildingBlocks.IETEID(new Double(teid1 * Math.pow(2, 25) +
        //        teid2 * Math.pow(2, 17) + teid3 * Math.pow(2, 9) + teid4).toString());
        IETEID teid = new IETEID(new BigInteger(teid1).toString());
        IEList.add(teid);
        
        // Sequence Number
        //int seq1 = pdpRequest[8] & 0xFF;
        //int seq2 = pdpRequest[9] & 0xFF;
        byte[] seq = new byte[2];
        seq[0] = (byte) (pdpRequest[8] & 0xFF);
        seq[1] = (byte) (pdpRequest[9] & 0xFF);
        //GTPMessageBuildingBlocks.IESequenceNumber seqnum = new GTPMessageBuildingBlocks.IESequenceNumber(new Integer(seq1 * 256 +
        //        seq2).toString());
        IESequenceNumber seqnum = new IESequenceNumber(new BigInteger(seq).toString());
        jLabel13.setText(seqnum.getValue());
        IEList.add(seqnum);

        
        // NPDU
        IENPDUNumber npdu = new IENPDUNumber(new Integer(pdpRequest[10] & 0xFF).toString());
        npdu.setValue("00000000");    // test
        IEList.add(npdu);
        
        // Ext Header
        IENextExtensionHeader extheader = new IENextExtensionHeader(new Integer(
                pdpRequest[11] & 0xFF).toString());
        IEList.add(extheader);

        // jTextField1.setText(String.format("%8s", Integer.toBinaryString(pdpRequest[0] & 0xFF)).replace(' ', '0'));

        // parse remaining IEs
        // create object for each
        byte[] imsi = new byte[9];
        byte[] TEID1 = new byte[5];
        byte[] TEIDCP = new byte[5];
        byte[] QoS;
        
        boolean found = false;
        
        for (int i = 12; i < pdpRequest.length; i++) {
            switch (pdpRequest[i] & 0xFF) {
                // IMSI
                case 2:
                    for (int k = 0; k < 9; k++) {
                        imsi[k] = pdpRequest[i + k];
                        //System.out.println(imsi[k]);
                    }
                    IEIMSI IMSI = new IEIMSI(imsi);
                    jLabel12.setText(IMSI.getValue());
                    //IEList.add(IMSI);
                    i += 8;  // ??????????? may be problematic
                    
                    break;
                // TEID1
                case 16:
                    jLabel14.setText("reached");
                    for (int k = 1; k < 5; k++) {
                        TEID1[k] = pdpRequest[i + k];
                        System.out.println(TEID1[k]);
                    }
                    IETEID1 ieTEID1 = new IETEID1(TEID1);
                    IEList.add(ieTEID1);
                    i += 4;
                    jLabel14.setText(ieTEID1.getValue());
                    break;
                // TEIDCP
                case 17:
                    for (int k = 1; k < 5; k++)
                        TEIDCP[k] = pdpRequest[i + k];
                    IETEIDCP ieTEIDCP = new IETEIDCP(TEIDCP);
                    IEList.add(ieTEIDCP);
                    jLabel15.setText(ieTEIDCP.getValue());
                    i += 4;
                    break;
                // QoS
                    
                case 135:
                    byte[] le = new byte[2];
                    le[0] = pdpRequest[i+1];
                    le[1] = pdpRequest[i+2];
                    BigInteger l2 = new BigInteger(le);
                    QoS = new byte[Integer.parseInt(l2.toString())];
                    System.out.println("==========");
                    System.out.println(Integer.parseInt(l2.toString()));
                    
                    for (int k = 0; k < Integer.parseInt(l2.toString()); k++)
                        QoS[k] = pdpRequest[i + k + 3];
                    
                    BigInteger qos = new BigInteger(QoS);
                    IEQoS ieQoS = new IEQoS(qos.toString());
                    System.out.println(ieQoS.getLength());
                    System.out.println("==========");
                    IEList.add(ieQoS);
                    //jLabel15.setText(ieQoS.getValue());
                    i += Integer.parseInt(l2.toString()) + 2;
                    break;
                    
                // RAI
                case 3:
                    i += 6;
                    break;
                // TLLI
                case 4:
                    i += 4;
                    break;
                // Recovery
                case 14:
                    i += 1;
                    break;
                // Selection mode
                case 15:
                    i += 1;
                    break;
                // TEID2
                case 18:
                    i += 5;
                    break;
                // NSAPI
                case 20:
                    i += 1;
                    break;
                // Charging characteristics
                case 26:
                    i += 2;
                    break;
                // others
                default:
                    int l = (pdpRequest[i+1] & 0xFF) * 256 + pdpRequest[i+2] & 0xFF;
                    i += l + 2;
                    break;
                
            }

        }
        
        sendPDPContextResponse(IEList, address);

    }
    
    
        public void acceptEchoRequest(byte[] echoRequest, InetAddress address) throws IOException {

        
        List<InformationElement> IEList = new ArrayList<InformationElement>();

        // TODO parseing
        
        // accept always present fields in following order
            // flags
            // message type
            // length
            // TEID
            // Sequence number
            // NPDU Number
            // Next Extension Header
        
        
        // flags
        String flags = "";
        for (int i = 2; i < String.format("%8s", Integer.toBinaryString(echoRequest[0] & 0xFF)).replace(' ', '0').length(); i++) {
            flags += String.format("%8s", Integer.toBinaryString(echoRequest[0] & 0xFF)).replace(' ', '0').charAt(i) + ";";
        }
        IEFlags flag = new IEFlags(flags);
        IEList.add(flag);
        
        // message type
        IEMessageType msgtype = new IEMessageType(new Integer(echoRequest[1] & 0xFF).toString());
        IEList.add(msgtype);
        
        // length
        IELength length = new IELength(new Integer((echoRequest[2] + echoRequest[3]) & 0xFF).toString());
        IEList.add(length);
        
        // TEID
        byte[] teid1 = new byte[4];
        
        teid1[0] = echoRequest[4];
        teid1[1] = echoRequest[5];
        teid1[2] = echoRequest[6];
        teid1[3] = echoRequest[7];
        
        //GTPMessageBuildingBlocks.IETEID teid = new GTPMessageBuildingBlocks.IETEID(new Double(teid1 * Math.pow(2, 25) +
        //        teid2 * Math.pow(2, 17) + teid3 * Math.pow(2, 9) + teid4).toString());
        IETEID teid = new IETEID(new BigInteger(teid1).toString());
        IEList.add(teid);
        
        // Sequence Number
        byte[] seq = new byte[2];
        seq[0] = (byte) (echoRequest[8] & 0xFF);
        seq[1] = (byte) (echoRequest[9] & 0xFF);
        //GTPMessageBuildingBlocks.IESequenceNumber seqnum = new GTPMessageBuildingBlocks.IESequenceNumber(new Integer(seq1 * 256 +
        //        seq2).toString());
        IESequenceNumber seqnum = new IESequenceNumber(new BigInteger(seq).toString());
        jLabel13.setText(seqnum.getValue());
        IEList.add(seqnum);


        // NPDU
        IENPDUNumber npdu = new IENPDUNumber(new Integer(echoRequest[10] & 0xFF).toString());
        //npdu.setValue("11111111");    // test
        IEList.add(npdu);
        
        // Ext Header
        IENextExtensionHeader extheader = new IENextExtensionHeader(new Integer(
                echoRequest[11] & 0xFF).toString());
        IEList.add(extheader);

        
        if (jCheckBox1.isSelected()) sendEchoResponse(IEList, address);

        }
        
        
    public void sendPDPContextResponse(List<InformationElement> IEList, InetAddress address) throws IOException {
        
        // build and send response to PDP request
        
        IEList.add(7, new IECause(jTextField1.getText()));
        IEList.add(8, new IEReorderingRequired(jTextField2.getText()));
        IEList.add(9, new IERecovery("48"));
        
        IEMessageType msgtype = null;
        IETEID teid = null;
        IETEID1 teid1 = null;
        BigInteger newteid1 = BigInteger.valueOf((long)(Math.random() * Math.pow(2, 30)));
        
        IETEIDCP teidcp = null;
        BigInteger newteidcp = BigInteger.valueOf((long)(Math.random() * Math.pow(2, 30)));
        
        BigInteger chargingID = BigInteger.valueOf((long)(Math.random() * Math.pow(2, 30)));
        
        System.out.println();
        for (InformationElement e : IEList) {
            if (e.getType().equals("GTPMessages.Message Type"))
                msgtype = (IEMessageType) e;
            else if (e.getType().equals("TEID"))
                teid = (IETEID) e;
            else if (e.getType().equals("TEID1"))
                teid1 = (IETEID1) e;
            else if (e.getType().equals("TEIDCP")) {
                teidcp = (IETEIDCP) e;
                
            }
            
            
            System.out.println(e.getType());
            
        }
        
        
        // temperoray solution
        IEList.add(IEList.indexOf(teidcp) + 1, new IEChargingID(chargingID.toString()));
        IEList.add(IEList.indexOf(teidcp) + 2, new IEEndUserAddress(jTextField6.getText()));
        IEList.add(IEList.indexOf(teidcp) + 3, new IEProtocolConfigurationOptions());
        IEList.add(IEList.indexOf(teidcp) + 4, new IEGSNAddress(jTextField7.getText()));
        IEList.add(IEList.indexOf(teidcp) + 5, new IEGSNAddress(jTextField8.getText()));
        //IEList.add(IEList.indexOf(teidcp) + 6, new GTPMessageBuildingBlocks.IEQoS("323241843419854800869261311"));
            
        msgtype.setValue("17");
        teid.setValue(teidcp.getValue());
        teid1.setValue(newteid1.toString());
        teidcp.setValue(newteidcp.toString());
        
        byte[] buf = BitStream.makeBitStream(IEList);
            
        //InetAddress address = InetAddress.getByName(jTextField81.getText());
        DatagramPacket packet = new DatagramPacket(buf, buf.length, address, 2123);
            
        socket.send(packet);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PDPMaintenance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PDPMaintenance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PDPMaintenance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PDPMaintenance.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PDPMaintenance(socket, thread).setVisible(true);
            }
        });
    }
    
    
    
    public void sendEchoResponse(List<InformationElement> IEList, InetAddress address) throws IOException {
        
        // build and send response to Echo request

        IEList.add(new IERecovery("48"));
        
        IEMessageType msgtype = null;
        IETEID teid = null;


        for (InformationElement e : IEList) {
            if (e.getType().equals("GTPMessages.Message Type"))
                msgtype = (IEMessageType) e;
            else if (e.getType().equals("TEID"))
                teid = (IETEID) e;

            
        }
    
        msgtype.setValue("2");
        teid.setValue("00000000");

        
        byte[] buf = BitStream.makeBitStream(IEList);
            
        //InetAddress address = InetAddress.getByName(jTextField81.getText());
        DatagramPacket packet = new DatagramPacket(buf, buf.length, address, 2123);
            
        socket.send(packet);
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField5;
    private javax.swing.JTextField jTextField6;
    private javax.swing.JTextField jTextField7;
    private javax.swing.JTextField jTextField8;
    // End of variables declaration//GEN-END:variables
}
