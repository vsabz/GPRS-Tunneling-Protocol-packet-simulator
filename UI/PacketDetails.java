package UI;

import GTPMessageBuildingBlocks.*;
import Utilities.BitStream;
import Utilities.RequestPacketBuilder;

import java.awt.AWTException;
import java.awt.Point;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.DatagramSocket;
import java.net.InetAddress;
import java.util.ArrayList;
import java.util.Collections;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author vsabziyev
 */
public class PacketDetails extends javax.swing.JFrame {

    /**
     * Creates new form PacketDetails
     */

    private RequestPacketBuilder packet;
    private List<InformationElement> IEList;
    private DefaultTableModel tableModel;
    private static DatagramSocket socket;
    private static SGSNUI ui;
    
    
    
    public PacketDetails(DatagramSocket given, SGSNUI givenUI) {
        initComponents();
        socket = given;
        ui = givenUI;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox<>();
        jTextField81 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jButton2 = new javax.swing.JButton();
        jComboBox2 = new javax.swing.JComboBox<>();
        jLabel1 = new javax.swing.JLabel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Please select", "Create PDP Context Request", "PDU Notification Request", "Echo Request", "Echo Response", "Custom" }));
        jComboBox1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jComboBox1ActionPerformed(evt);
            }
        });

        jTextField81.setText("192.168.1.1");

        jButton1.setText("Send");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "IE", "Value", "Length"
            }
        )
        //{public boolean isCellEditable(int row, int column){return false;}}
    );
    jTable1.setToolTipText("");
    jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
        public void mouseClicked(java.awt.event.MouseEvent evt) {
            jTable1MouseClicked(evt);
        }
        public void mousePressed(java.awt.event.MouseEvent evt) {
            jTable1MousePressed(evt);
        }
    });
    jScrollPane1.setViewportView(jTable1);

    jButton2.setText("+ Add");
    jButton2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton2ActionPerformed(evt);
        }
    });

    jComboBox2.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Flags", "NPDU Number", "Next Extension Header", "TEID", "Sequence Number", "TEID I", "TEID Control Plane", "Selection Mode", "Protocol Configuration Options", "RAT Type", "APN", "Recovery", "Length", "End User Address", "GTPMessages.Message Type", "IMSI", "RAI", "GSN Address", "MS Time Zone", "MSISDN", "NSAPI", "IMEI(SV)", "Quality of Service" }));
    jComboBox2.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jComboBox2ActionPerformed(evt);
        }
    });

    jLabel1.setText("Add Information Element");

    jButton3.setText("Delete selected GTPMessageBuildingBlocks.InformationElement");
    jButton3.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton3ActionPerformed(evt);
        }
    });

    jButton4.setText("Move up");
    jButton4.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton4ActionPerformed(evt);
        }
    });

    jButton5.setText("Move down");
    jButton5.addActionListener(new java.awt.event.ActionListener() {
        public void actionPerformed(java.awt.event.ActionEvent evt) {
            jButton5ActionPerformed(evt);
        }
    });

    jTextField1.setText("1");

    jTextField2.setText("0");

    jLabel2.setText("IP");

    jLabel3.setText("Count");

    jLabel5.setText("Wait");

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(layout.createSequentialGroup()
            .addContainerGap()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jButton5)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jButton4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGap(3, 3, 3)))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 402, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                .addComponent(jComboBox2, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addComponent(jButton2)
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
            .addGap(84, 84, 84))
        .addGroup(layout.createSequentialGroup()
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(131, 131, 131)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createSequentialGroup()
                    .addGap(81, 81, 81)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jLabel2)
                        .addComponent(jLabel3)
                        .addComponent(jLabel5))
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jTextField1, javax.swing.GroupLayout.Alignment.TRAILING)
                        .addComponent(jTextField81, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE)
                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 86, Short.MAX_VALUE))
                    .addGap(28, 28, 28)
                    .addComponent(jButton1)))
            .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );
    layout.setVerticalGroup(
        layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
            .addContainerGap()
            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(layout.createSequentialGroup()
                    .addGap(70, 70, 70)
                    .addComponent(jLabel1)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jComboBox2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jButton2)
                    .addGap(61, 61, 61)
                    .addComponent(jButton3))
                .addGroup(layout.createSequentialGroup()
                    .addGap(107, 107, 107)
                    .addComponent(jButton4)
                    .addGap(32, 32, 32)
                    .addComponent(jButton5))
                .addGroup(layout.createSequentialGroup()
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
            .addGap(11, 11, 11)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextField81, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel2))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel3))
            .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addComponent(jLabel5))
            .addContainerGap())
    );

    pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        try {
            /*
            if (!jTextField1.getText().equals(packet.getFlags()))
                packet.setFlags(jTextField1.getText());
            if (!jTextField2.getText().equals(packet.getMessageType()))
                packet.setMessageType(jTextField2.getText());
            if (!jTextField3.getText().equals(packet.getLength()))
                packet.setLength(jTextField3.getText());
            if (!jTextField4.getText().equals(packet.getTeid()))
                packet.setTeid(jTextField4.getText());
            if (!jTextField5.getText().equals(packet.getSequenceNumber()))
                packet.setSequenceNumber(jTextField5.getText()); */
            
            String msgType = null;
            tableModel = (DefaultTableModel) jTable1.getModel();
            DefaultTableModel UITableModel = ui.getTableModel();
            List<InformationElement> elements = new ArrayList<InformationElement>();
            for (int i=0; i < tableModel.getRowCount(); i++) {
                
                String element = tableModel.getValueAt(i, 0).toString();
                
                // update IEs
                if (!element.equals("Flags") && !element.equals("RAI")) 
                    IEList.get(i).setValue(tableModel.getValueAt(i, 1).toString());
                
                
                // find message type
                if (element.equals("GTPMessages.Message Type")) {
                    msgType = IEList.get(i).getValue();
                    
                    switch (msgType) {
                    case "1": msgType = "Echo Request";
                            break;
                    case "2": msgType = "Echo Response";
                            break;
                    case "17": msgType = "Create PDP Context Response";
                            break;
                }
                    
                
                
        }
                
                /*
                switch (element) {
                
                case "Flags" :  elements.add(new GTPMessageBuildingBlocks.IEFlags(tableModel.getValueAt(i, 1).toString()));
                               // GTPMessageBuildingBlocks.IEFlags flags = (GTPMessageBuildingBlocks.IEFlags) IEList.get(i);
                               // flags.setFlags(tableModel.getValueAt(i, 2).toString());
                                break;
                case "GTPMessages.Message Type" : elements.add(new GTPMessageBuildingBlocks.IEMessageType(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "TEID" : elements.add(new GTPMessageBuildingBlocks.IETEID(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "NPDU Number" : elements.add(new GTPMessageBuildingBlocks.IENPDUNumber(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "Length" : elements.add(new GTPMessageBuildingBlocks.IELength(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "Sequence Number" : elements.add(new GTPMessageBuildingBlocks.IESequenceNumber(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "IMSI" : elements.add(new GTPMessageBuildingBlocks.IEIMSI(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "RAI" : elements.add(new GTPMessageBuildingBlocks.IERAI(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "Recovery" : elements.add(new GTPMessageBuildingBlocks.IERecovery(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "Selection Mode" : elements.add(new GTPMessageBuildingBlocks.IESelectionMode(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "TEID1" : elements.add(new GTPMessageBuildingBlocks.IETEID1(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "TEIDCP" : elements.add(new GTPMessageBuildingBlocks.IETEIDCP(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "NSAPI" : elements.add(new GTPMessageBuildingBlocks.IENSAPI(tableModel.getValueAt(i, 1).toString()));
                                //GTPMessageBuildingBlocks.IENSAPI nsapi = (GTPMessageBuildingBlocks.IENSAPI) IEList.get(i);
                                //nsapi.setNsapi(tableModel.getValueAt(i, 1).toString());
                                break;
                case "End User Address" : elements.add(new GTPMessageBuildingBlocks.IEEndUserAddress(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "APN" : elements.add(new GTPMessageBuildingBlocks.IEAPN(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "Protocol Configuration Options" : elements.add(new GTPMessageBuildingBlocks.IEProtocolConfigurationOptions(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "GSN Address" : elements.add(new GTPMessageBuildingBlocks.IEGSNAddress(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "MSISDN" : elements.add(new GTPMessageBuildingBlocks.IEMSISDN(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "QoS" : elements.add(new GTPMessageBuildingBlocks.IEQoS(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "RAT Type" : elements.add(new GTPMessageBuildingBlocks.IERATType(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "User Location Info" : elements.add(new GTPMessageBuildingBlocks.IEUserLocationInfo(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "MS Time Zone" : elements.add(new GTPMessageBuildingBlocks.IEMSTimeZone(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "IMEISV" : elements.add(new GTPMessageBuildingBlocks.IEIMEISV(tableModel.getValueAt(i, 1).toString()));
                                break;
                case "Next Extension Header" : elements.add(new GTPMessageBuildingBlocks.IENextExtensionHeader(tableModel.getValueAt(i, 1).toString()));
                                break;

                } */
            }

            // get a datagram socket
            // DatagramSocket socket = new DatagramSocket(2123);
            
            // send request
            //for (Integer i=100; i<=200; i++) {
                //packet.setLength("153");
                byte[] buf = new byte[packet.getBitStream().length];
                //buf = packet.getBitStream();
                buf = BitStream.makeBitStream(IEList);
            
                InetAddress address = InetAddress.getByName(jTextField81.getText());
                DatagramPacket packet = new DatagramPacket(buf, buf.length, address, 2123);
                
                //socket.bind(new InetSocketAddress(2123));
                for (int k=0; k<Integer.parseInt(jTextField1.getText()); k++) {
                    UITableModel.addRow(new Object[]{"me", packet.getAddress(), msgType});
                    socket.send(packet);
                    if (Integer.parseInt(jTextField2.getText()) != 0) 
                        Thread.sleep(Integer.parseInt(jTextField2.getText()));
                }
            //}
            
            
            
            
            //socket.close();
            } catch (IOException ex) {
            Logger.getLogger(SGSNUI.class.getName()).log(Level.SEVERE, null, ex);
            } catch (InterruptedException ex) {
            Logger.getLogger(PacketDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jComboBox1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox1ActionPerformed
        
        
        
        switch (jComboBox1.getSelectedItem().toString()) {
            case "Echo Request" : 
                packet = new RequestPacketBuilder("Echo Request");
                break;
            case "Echo Response" : 
                packet = new RequestPacketBuilder("Echo Response");
                break;
            case "Create PDP Context Request" : 
                packet = new RequestPacketBuilder("Create PDP Context Request");
                break;
            case "PDU Notification Request" : 
                packet = new RequestPacketBuilder("PDU Notification Request");
                break;
            case "Custom" : 
                packet = new RequestPacketBuilder("Custom");
                break;
        }
        
        IEList = packet.getIEList();
        
        // reset table
        tableModel = (DefaultTableModel) jTable1.getModel();
        for (int i = tableModel.getRowCount() -1; i >= 0; i--) {
            tableModel.removeRow(i);
        }
        
        for (InformationElement e : IEList) {
            tableModel.addRow(new Object[]{e.getType(), e.getValue(), e.getLength()});
        }
        
        /*
        jTextField1.setText(packet.getFlags());
        jTextField2.setText(packet.getMessageType());
        jTextField3.setText(packet.getLength());
        jTextField4.setText(packet.getTeid());
        jTextField5.setText(packet.getSequenceNumber());
        */
        
    }//GEN-LAST:event_jComboBox1ActionPerformed

    private void jComboBox2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jComboBox2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jComboBox2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        
        tableModel = (DefaultTableModel) jTable1.getModel();
        // List<GTPMessageBuildingBlocks.InformationElement> elements = new ArrayList<GTPMessageBuildingBlocks.InformationElement>();
        // for (int i=0; i < tableModel.getRowCount(); i++) {
            String element = jComboBox2.getSelectedItem().toString();
                switch (element) {
                
                case "Flags" : IEFlags flags = new IEFlags("1;1;0;0;1;0;");
                                IEList.add(flags);
                                tableModel.addRow(new Object[]{flags.getType(), flags.getValue(), flags.getLength()});
                                break;
                case "GTPMessages.Message Type" : IEMessageType msgType = new IEMessageType("45000");
                                IEList.add(msgType);
                                tableModel.addRow(new Object[]{msgType.getType(), msgType.getValue(), msgType.getLength()});
                                break;
                case "TEID" : IETEID teid = new IETEID("50");
                                IEList.add(teid);
                                tableModel.addRow(new Object[]{teid.getType(), teid.getValue(), teid.getLength()});
                                break;
                case "NPDU Number" : IENPDUNumber NPDUNumber = new IENPDUNumber("50");
                                IEList.add(NPDUNumber);
                                tableModel.addRow(new Object[]{NPDUNumber.getType(), NPDUNumber.getValue(), NPDUNumber.getLength()});
                                break;
                case "Length" : IELength length = new IELength("50");
                                IEList.add(length);
                                tableModel.addRow(new Object[]{length.getType(), length.getValue(), length.getLength()});
                                break;
                case "Sequence Number" : IESequenceNumber sequenceNumber = new IESequenceNumber("45000");
                                IEList.add(sequenceNumber);
                                tableModel.addRow(new Object[]{sequenceNumber.getType(), sequenceNumber.getValue(), sequenceNumber.getLength()});
                                break;
                case "IMSI" : IEIMSI imsi = new IEIMSI("50");
                                IEList.add(imsi);
                                tableModel.addRow(new Object[]{imsi.getType(), imsi.getValue(), imsi.getLength()});
                                break;
                case "RAI" : IERAI rai = new IERAI("50");
                                IEList.add(rai);
                                tableModel.addRow(new Object[]{rai.getType(), rai.getValue(), rai.getLength()});
                                break;
                case "Recovery" : IERecovery rec = new IERecovery("50");
                                IEList.add(rec);
                                tableModel.addRow(new Object[]{rec.getType(), rec.getValue(), rec.getLength()});
                                break;
                case "Selection Mode" : IESelectionMode selMode = new IESelectionMode("50");
                                IEList.add(selMode);
                                tableModel.addRow(new Object[]{selMode.getType(), selMode.getValue(), selMode.getLength()});
                                break;
                case "TEID I" : IETEID1 teid1 = new IETEID1("50");
                                IEList.add(teid1);
                                tableModel.addRow(new Object[]{teid1.getType(), teid1.getValue(), teid1.getLength()});
                                break;
                case "TEID Control Plane" : IETEIDCP teidcp = new IETEIDCP("50");
                                IEList.add(teidcp);
                                tableModel.addRow(new Object[]{teidcp.getType(), teidcp.getValue(), teidcp.getLength()});
                                break;
                case "NSAPI" : IENSAPI nsapi = new IENSAPI("50");
                                IEList.add(nsapi);
                                tableModel.addRow(new Object[]{nsapi.getType(), nsapi.getValue(), nsapi.getLength()});
                                break;
                case "End User Address" : IEEndUserAddress address = new IEEndUserAddress("50");
                                IEList.add(address);
                                tableModel.addRow(new Object[]{address.getType(), address.getValue(), address.getLength()});
                                break;
                case "APN" : IEAPN apn = new IEAPN("50");
                                IEList.add(apn);
                                tableModel.addRow(new Object[]{apn.getType(), apn.getValue(), apn.getLength()});
                                break;
                case "Protocol Configuration Options" : IEProtocolConfigurationOptions protConf = new IEProtocolConfigurationOptions("50");
                                IEList.add(protConf);
                                tableModel.addRow(new Object[]{protConf.getType(), protConf.getValue(), protConf.getLength()});
                                break;
                case "GSN Address" : IEGSNAddress gsnaddress = new IEGSNAddress("50");
                                IEList.add(gsnaddress);
                                tableModel.addRow(new Object[]{gsnaddress.getType(), gsnaddress.getValue(), gsnaddress.getLength()});
                                break;
                case "MSISDN" : IEMSISDN msisdn = new IEMSISDN("50");
                                IEList.add(msisdn);
                                tableModel.addRow(new Object[]{msisdn.getType(), msisdn.getValue(), msisdn.getLength()});
                                break;
                case "Quality of Service" : IEQoS qos = new IEQoS("50");
                                IEList.add(qos);
                                tableModel.addRow(new Object[]{qos.getType(), qos.getValue(), qos.getLength()});
                                break;
                case "RAT Type" : IERATType ratType = new IERATType("50");
                                IEList.add(ratType);
                                tableModel.addRow(new Object[]{ratType.getType(), ratType.getValue(), ratType.getLength()});
                                break;
                case "User Location Info" : IEUserLocationInfo locinfo = new IEUserLocationInfo("50");
                                IEList.add(locinfo);
                                tableModel.addRow(new Object[]{locinfo.getType(), locinfo.getValue(), locinfo.getLength()});
                                break;
                case "MS Time Zone" : IEMSTimeZone timezone = new IEMSTimeZone("50");
                                IEList.add(timezone);
                                tableModel.addRow(new Object[]{timezone.getType(), timezone.getValue(), timezone.getLength()});
                                break;
                case "IMEI(SV)" : IEIMEISV imeisv = new IEIMEISV("50");
                                IEList.add(imeisv);
                                tableModel.addRow(new Object[]{imeisv.getType(), imeisv.getValue(), imeisv.getLength()});
                                break;
                case "Next Extension Header" : IENextExtensionHeader exthead = new IENextExtensionHeader("50");
                                IEList.add(exthead);
                                tableModel.addRow(new Object[]{exthead.getType(), exthead.getValue(), exthead.getLength()});
                                break;


                
                }
                jTable1.setRowSelectionInterval(tableModel.getRowCount()-1, tableModel.getRowCount()-1);
                jTable1.setAutoscrolls(true);
        //}
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        // MOVE UP button
        if (jTable1.getSelectedRow() > 0) {
            tableModel = (DefaultTableModel) jTable1.getModel();
            Object a1 = tableModel.getValueAt(jTable1.getSelectedRow(), 0);
            Object a2 = tableModel.getValueAt(jTable1.getSelectedRow(), 1);
            Object a3 = tableModel.getValueAt(jTable1.getSelectedRow(), 2);
            Object b1 = tableModel.getValueAt(jTable1.getSelectedRow() - 1, 0);
            Object b2 = tableModel.getValueAt(jTable1.getSelectedRow() - 1, 1);
            Object b3 = tableModel.getValueAt(jTable1.getSelectedRow() - 1, 2);
            
            tableModel.setValueAt(a1, jTable1.getSelectedRow() - 1, 0);
            tableModel.setValueAt(a2, jTable1.getSelectedRow() - 1, 1);
            tableModel.setValueAt(a3, jTable1.getSelectedRow() - 1, 2);
            tableModel.setValueAt(b1, jTable1.getSelectedRow(), 0);
            tableModel.setValueAt(b2, jTable1.getSelectedRow(), 1);
            tableModel.setValueAt(b3, jTable1.getSelectedRow(), 2);
            
            Collections.swap(IEList, jTable1.getSelectedRow(), jTable1.getSelectedRow()-1);
            jTable1.setRowSelectionInterval(jTable1.getSelectedRow() - 1, jTable1.getSelectedRow() - 1);
        }
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        // MOVE DOWN button
        if (jTable1.getSelectedRow() < jTable1.getRowCount() - 1) {
            tableModel = (DefaultTableModel) jTable1.getModel();
            Object a1 = tableModel.getValueAt(jTable1.getSelectedRow(), 0);
            Object a2 = tableModel.getValueAt(jTable1.getSelectedRow(), 1);
            Object a3 = tableModel.getValueAt(jTable1.getSelectedRow(), 2);
            Object b1 = tableModel.getValueAt(jTable1.getSelectedRow() + 1, 0);
            Object b2 = tableModel.getValueAt(jTable1.getSelectedRow() + 1, 1);
            Object b3 = tableModel.getValueAt(jTable1.getSelectedRow() + 1, 2);
            
            tableModel.setValueAt(a1, jTable1.getSelectedRow() + 1, 0);
            tableModel.setValueAt(a2, jTable1.getSelectedRow() + 1, 1);
            tableModel.setValueAt(a3, jTable1.getSelectedRow() + 1, 2);
            tableModel.setValueAt(b1, jTable1.getSelectedRow(), 0);
            tableModel.setValueAt(b2, jTable1.getSelectedRow(), 1);
            tableModel.setValueAt(b3, jTable1.getSelectedRow(), 2);
            
            Collections.swap(IEList, jTable1.getSelectedRow(), jTable1.getSelectedRow()+1);
            jTable1.setRowSelectionInterval(jTable1.getSelectedRow() + 1, jTable1.getSelectedRow() + 1);
        }
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTable1MouseClicked

    private void jTable1MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MousePressed
        // TODO add your handling code here:
        try {
            tableModel = (DefaultTableModel) jTable1.getModel();
            JTable table =(JTable) evt.getSource();
            Point p = evt.getPoint();
            int row = table.rowAtPoint(p);
            // when double click happens
            if (evt.getClickCount() == 2) {
                
                // if FLAGS were double clicked
                if (tableModel.getValueAt(row, 0).toString().equals("Flags")) {
                
                        Robot r = new Robot();
                        r.keyPress(KeyEvent.VK_ENTER);
                        r.keyRelease(KeyEvent.VK_ENTER);
                        
                      
                        IEFlags flags = (IEFlags) IEList.get(row);
                        
                        
                        flags.setUIVisible(true, row);
                        flags.setParentWindow(this);
                
                }
                else if (tableModel.getValueAt(row, 0).toString().equals("RAI")) {
                        Robot r = new Robot();
                        r.keyPress(KeyEvent.VK_ENTER);
                        r.keyRelease(KeyEvent.VK_ENTER);
                        
                      
                        IERAI rai = (IERAI) IEList.get(row);
                        
                        
                        rai.setUIVisible(true, row);
                        rai.setParentWindow(this);
                }
            
            }
            
        } catch (AWTException ex) {
                    Logger.getLogger(PacketDetails.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_jTable1MousePressed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        
        IEList.remove(jTable1.getSelectedRow());
        tableModel.removeRow(jTable1.getSelectedRow());
        
    }//GEN-LAST:event_jButton3ActionPerformed

    // find element in Table and update value
    public void updateElement(int given) {
        //tableModel.setValueAt(IEList.get(given).getType(), IEList.get(given).getValue(), Integer.toString(IEList.get(given).getLength()));
        tableModel.setValueAt((Object) IEList.get(given).getValue(), given, 1);
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PacketDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PacketDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PacketDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PacketDetails.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PacketDetails(socket, ui).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JComboBox<String> jComboBox2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    private javax.swing.JTextField jTextField81;
    // End of variables declaration//GEN-END:variables
}
